# - * - coding: utf-8 - * - 
"""Dataset generator
This module creates a dataset generated by trees.
The algorithm works as follows:
    * Create a seed, a list of lists that contain n random integer.
    * Fills the seed with noise
    * Builds a tree from a sequence
    * Adds noise to the tree by adding random nodes
    * Generates the dataset

Authors: 
    Nicol√≤ Merzi
    Francesco Battista
"""

import random
import copy
import csv
from random import shuffle, randint
from Binary_Tree import BinaryTree


def createSequence(n_list):
    """Create a seed

    Arguments:
        n_list {integer} -- [Number of lists inside the seed]

    Returns:
        [list] -- [It rapresents the seed of a single tree]
        Example: 
            * [[4],[7],[1],[5]]
            * [[1,8],[5],[3,9]]
            * [[4],[5,6],[8]]
    """
    aSeq = []
    for i in range(0, n_list):
        if random.random() < 0.5:
            aSeq.append([randint(0,9)])
        else:
            aSeq.append([randint(0,9), randint(0,9)])
    return aSeq


def seqFiller(seq, n_max):
    """Filling
    The function fills a list with random numbers up to n_max elements.
    
    Arguments:
        seq {[list]} -- [list of lists]
        n_max {[integer]} -- [number of elements inside list]

    Returns:
        [list] -- [A copy of the original list, filled by random numbers]
    """
    seqfilled = copy.deepcopy(seq) #deep copy original list and modify only the copy
    for i in seqfilled:
        while len(i) < n_max:
            i.append(randint(0,9))
    return seqfilled #return copy list - original list "seq" untouched


def seqTreeBuilder(aSeq):
    """Given a sequence, the function build a tree
    
    Arguments:
        aSeq {list} -- [generic list]
    
    Returns:
        [tree] -- [Binary tree]
    """
    tree = BinaryTree(aSeq[0]) #root node
    for i in aSeq[1:]:
        tree.insertBottom(i)
    return tree 

def createList(max_seq_value, max_range):
    """Create a list of random values, this list is used as single random node in the tree.
    
    Arguments:
        max_seq_value {[int]} -- [Number of elements in each lists]
        max_range {[int]} -- [Max value of the elements inside each lists]
    
    Returns:
        [list] -- [list of integer]
    """
    list = []
    for i in range(0,max_seq_value):
        list.append(randint(1,max_range))
    return list

def addNodesTree(tree, tree_noise, max_seq_value):
    """the function inserts n random nodes in a tree, this nodes are used as noise inside the tree
    
    Arguments:
        tree {[tree]} -- [The tree where the function has to append random nodes]
        tree_noise {[int]} -- [Number of nodes to append in a tree]
        max_seq_value {[int]} -- [Number of values in a list]
    """

    for i in range(0, tree_noise):
        aList = createList(max_seq_value, 9)
        if random.random() < 0.5 : 
            tree.insertTraversal(aList)
        else:
            parent = tree.insertHead(aList)
            tree = parent
    return tree
    
def randomTrees(max_seq_value, treeLenght):
    """Create a random tree
    
    Arguments:
        max_seq_value {[int]} -- [Number of values in a list]
        treeLenght {[int]} -- [Number of nodes]
    """
    aList = createList(max_seq_value, 9)
    tree = BinaryTree(aList)
    for i in range(1, treeLenght):
        aList = createList(max_seq_value, 9)
        tree.insertTraversal(aList)
    return tree

def records2(tree, t_id, r_id, aList):
    """Given a tree the function builds a dataset as follows: 
        * Record id
        * Tree id
        * Pair of nodes in a parent-child relationship
    
    Arguments:
        tree {[tree]}
        t_id {[int]} -- [Non-negative integer, the tree id. Equal for all nodes belonging to the same tree]
        r_id {[int]} -- [Non-negative integer, the record id is unique and consecutive]
        aList {[list]} -- [The list that contains information about a tree]
    
    Returns:
        [record] -- [Recursive, it is used to print the entire dataset]
    """
    r_id = r_id + 1
    if tree.left != None:
        #print output to screen
        print(str(r_id) + ';' + str(t_id) + ';', tree.data, tree.left.data)
        #save output in a list
        aList.append([r_id,t_id, str(tree.data) + str(tree.left.data)])
        r_id = records2(tree.left, t_id, r_id, aList)
    if tree.right != None:
        #print output to screen
        print(str(r_id) + ';' + str(t_id) + ';', tree.data, tree.right.data)
        #save output in a list
        aList.append([r_id,t_id, str(tree.data) + str(tree.right.data)])
        r_id = records2(tree.right, t_id, r_id, aList)
    return r_id

def print_dataset(dataset_list, name):
    """Writing entire dataset in a csv
    
    Arguments:
        dataset_list {[list]} -- [List of r_id, t_id, pair of nodes in a parent-child relationship]
    """
    with open(name, 'w') as csvfile:
        csvwriter = csv.writer(csvfile)
        for row in dataset_list:
            csvwriter.writerow(row)

def dataset_generator (minTree, maxTree, n_list, max_seq_value, n_sequences, tree_noise, random_trees):
    """Dataset generator. Once the parameters have been set, a dataset can be built.
        * A sequence is generated
        * The sequence is then filled with noise (other random numbers)
        * A tree is generated
        * Noise is added to the tree
        * A new record is built
        * Random trees are added (noise)
        * A new record is built
    
    Arguments:
        minTree {[int]} -- [Minimum number of trees generated per sequence]
        maxTree {[int]} -- [Maximum number of trees generated per sequence. Has to be greater or equal than minTree]
        n_list {[int]} -- [Sequence lenght]
        max_seq_value {[int]} -- [Number of elements inside a list]
        n_sequences {[int]} -- [Number of sequences generated]
        tree_noise {[int]} -- [Number of nodes to add as noise in a tree]
        random_trees {[int]} -- [Number of random trees between trees created with a sequence (noise)]
    """
    r_id = 0
    t_id = 0
    treeList = []
    seqList = []
    #Creating sequences
    for sequences in range(1, n_sequences + 1):
        seq = createSequence(n_list) #creating sequence
        seqList.append(seq)
        print("\n","Sequence created: ", seq)
        #creating trees 
        n_tree = random.randint(minTree, maxTree)
        for n_trees in range(1, n_tree + 1):
            t_id = t_id + 1
            seqfilled = seqFiller(seq, max_seq_value) #filled sequence
            
            print("\n","Sequence filled: ", seqfilled)
            
            tree = seqTreeBuilder(seqfilled) #from filled sequence to tree
            noised_tree = addNodesTree(tree,tree_noise, max_seq_value) #adding noise
            
            print("\n","Tree: ", n_trees, "\n")
            print(noised_tree, "\n")
            
            r_id = records2(noised_tree, t_id, r_id, treeList)
            r_id = r_id - 1

            for i in range(0,random_trees):
                print("\n", "Random Tree")
                t_id = t_id + 1
                treeNoise = randomTrees(max_seq_value, n_list+tree_noise)
                r_id = records2(treeNoise, t_id, r_id, treeList)
                r_id = r_id - 1
            
    print_dataset(treeList, "dataset4.csv")
    print_dataset(seqList, "sequences4.csv")
 

# Dataset Generation
if __name__ == "__main__":
    minTree = 5         #minimum number of trees to create for a given sequence
    maxTree = 20         #maximum number of trees to create for a given sequence (has to be greater than minTree)
    n_list = 5          #sequence lenght
    max_seq_value = 4   #number of elements inside a list
    n_sequences = 40     #number of sequences generated
    tree_noise = 5    #number of nodes to add as noise in a tree
    random_trees = 3    #number of random trees between trees created with a sequence (noise)

    dataset_generator(minTree, maxTree, n_list, max_seq_value, n_sequences, tree_noise, random_trees)  

"""Dataset1 18848 records, base dataset
minTree = 5         
maxTree = 20         
n_list = 3          
max_seq_value = 3  
n_sequences = 50    
tree_noise = 6      
random_trees = 3"""    

"""Dataset2 83072 records, more tree noise
minTree = 5      
maxTree = 20        
n_list = 3         
max_seq_value = 3   
n_sequences = 50   
tree_noise = 30    
random_trees = 3"""    

"""Dataset3 38070 records,  more sequences
minTree = 5        
maxTree = 20       
n_list = 3         
max_seq_value = 3 
n_sequences = 100   
tree_noise = 6   
random_trees = 3"""

"""Dataset4 19116 records, longer sequences
minTree = 5         
maxTree = 20        
n_list = 5          
max_seq_value = 4  
n_sequences = 40    
tree_noise = 5    
random_trees = 3 """